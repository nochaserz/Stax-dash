import React, { useState, useEffect } from 'react';
import { 
  Activity, 
  Settings, 
  FileText, 
  Power, 
  PowerOff, 
  TrendingUp, 
  TrendingDown, 
  DollarSign, 
  Bitcoin, 
  Crown, 
  Zap, 
  ArrowUpDown, 
  QrCode, 
  Copy 
} from 'lucide-react';

const StaxApp = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [loginForm, setLoginForm] = useState({ email: '', password: '' });
  const [activeTab, setActiveTab] = useState('dashboard');
  const [lightningTab, setLightningTab] = useState('balance');
  
  const [subscriptionStatus] = useState({
    plan: 'Pro Monthly',
    status: 'Active',
    expiresAt: '2025-09-27',
    daysRemaining: 31
  });
  
  const [bots, setBots] = useState({
    scalper: { running: false, status: 'Stopped' },
    sniper: { running: false, status: 'Stopped' },
    arbitrage: { running: false, status: 'Stopped' }
  });
  
  const [balance, setBalance] = useState({
    usd: 12547.83,
    btc: 0.28394,
    lightning: 2847593,
    onchain: 0.25547
  });
  
  const [trades] = useState([
    { id: 1, token: 'ETH', entry: 2340.50, amount: 0.5, pnl: 5.2, isProfit: true, tradeValue: 1170.25 },
    { id: 2, token: 'SOL', entry: 98.20, amount: 12, pnl: -2.1, isProfit: false, tradeValue: 1178.40 },
    { id: 3, token: 'BTC', entry: 43250.00, amount: 0.1, pnl: 8.7, isProfit: true, tradeValue: 4325.00 },
    { id: 4, token: 'DOGE', entry: 0.08, amount: 62.5, pnl: 12.3, isProfit: true, tradeValue: 5.00 }
  ]);
  
  const [logs] = useState([
    { id: 1, timestamp: '14:32:15', token: 'ETH', action: 'BUY', amount: 0.5, pnl: 5.2, isProfit: true, tradeValue: 1170.25 },
    { id: 2, timestamp: '14:28:03', token: 'SOL', action: 'SELL', amount: 12, pnl: -2.1, isProfit: false, tradeValue: 1178.40 },
    { id: 3, timestamp: '14:15:44', token: 'BTC', action: 'BUY', amount: 0.1, pnl: 8.7, isProfit: true, tradeValue: 4325.00 }
  ]);
  
  const [settings, setSettings] = useState({
    apiKey: '',
    walletAddress: '',
    telegramWebhook: '',
    scalperAggressiveness: 50,
    sniperTradeSize: 1000,
    arbitrageSpread: 0.5,
    minimumTradeAmount: 1,
    maximumTradeAmount: 10000,
    enableMicroTrading: true
  });

  useEffect(() => {
    const interval = setInterval(() => {
      setBalance(prev => ({
        ...prev,
        usd: prev.usd + (Math.random() - 0.5) * 100,
        btc: prev.btc + (Math.random() - 0.5) * 0.001
      }));
    }, 10000);
    return () => clearInterval(interval);
  }, []);

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1500));
    if (loginForm.email && loginForm.password) {
      setIsLoggedIn(true);
    }
    setIsLoading(false);
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setLoginForm({ email: '', password: '' });
  };

  const toggleBot = (botName) => {
    setBots(prev => ({
      ...prev,
      [botName]: {
        running: !prev[botName].running,
        status: !prev[botName].running ? 'Running' : 'Stopped'
      }
    }));
  };

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center px-6">
        <div className="w-full max-w-sm">
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-xl mb-6 bg-gray-800 border-2 border-gray-600">
              <div className="flex items-end space-x-1">
                <div className="w-2.5 h-4 rounded-sm bg-teal-700"></div>
                <div className="w-2.5 h-6 rounded-sm bg-teal-500"></div>
                <div className="w-2.5 h-8 rounded-sm bg-green-600"></div>
                <div className="relative w-2 h-6 ml-1 bg-green-500" style={{clipPath: 'polygon(0 100%, 0 30%, 70% 0, 100% 70%, 30% 100%)'}}></div>
              </div>
            </div>
            <h1 className="text-3xl font-bold text-white mb-2">Stax</h1>
            <p className="text-gray-400">Trading Bot Manager</p>
          </div>

          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">Email</label>
              <input
                type="email"
                required
                value={loginForm.email}
                onChange={(e) => setLoginForm(prev => ({...prev, email: e.target.value}))}
                className="w-full p-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
                placeholder="Enter your email"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">Password</label>
              <input
                type="password"
                required
                value={loginForm.password}
                onChange={(e) => setLoginForm(prev => ({...prev, password: e.target.value}))}
                className="w-full p-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500/20"
                placeholder="Enter your password"
              />
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className="w-full text-white font-semibold py-3 px-4 rounded-lg transition-all duration-300 flex items-center justify-center"
              style={{
                background: isLoading 
                  ? 'linear-gradient(135deg, #0d9488 0%, #059669 100%)' 
                  : 'linear-gradient(135deg, #14b8a6 0%, #22c55e 100%)',
                boxShadow: isLoading ? 'none' : '0 4px 20px rgba(20, 184, 166, 0.3)'
              }}
            >
              {isLoading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Signing In...
                </>
              ) : (
                'Sign In'
              )}
            </button>
          </form>

          <div className="mt-8 p-4 bg-gray-800 rounded-lg border border-gray-700">
            <p className="text-xs text-gray-400 text-center mb-2">Demo Mode</p>
            <p className="text-xs text-gray-300 text-center">
              Enter any email and password to continue
            </p>
          </div>
        </div>
      </div>
    );
  }

  const renderDashboard = () => (
    <div className="p-6 space-y-6">
      <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Crown className="w-5 h-5 text-yellow-400" />
            <div>
              <span className="text-white font-medium">{subscriptionStatus.plan}</span>
              <span className="ml-2 px-2 py-1 rounded text-xs bg-green-900 text-green-300">
                {subscriptionStatus.status}
              </span>
            </div>
          </div>
          <div className="text-right">
            <p className="text-sm text-gray-400">{subscriptionStatus.daysRemaining} days left</p>
            <p className="text-xs text-gray-500">Renews {subscriptionStatus.expiresAt}</p>
          </div>
        </div>
      </div>

      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h2 className="text-lg font-semibold text-white mb-4">Total Balance</h2>
        <div className="grid grid-cols-2 gap-4">
          <div className="flex items-center space-x-2">
            <DollarSign className="w-5 h-5 text-green-400" />
            <div>
              <span className="text-xl font-bold text-white">
                ${balance.usd.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}
              </span>
              <p className="text-xs text-gray-400">USD Total</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Bitcoin className="w-5 h-5 text-orange-400" />
            <div>
              <span className="text-xl font-semibold text-gray-300">{balance.btc.toFixed(5)}</span>
              <p className="text-xs text-gray-400">BTC Total</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Zap className="w-5 h-5 text-yellow-400" />
            <div>
              <span className="text-lg font-semibold text-yellow-300">{balance.lightning.toLocaleString()}</span>
              <p className="text-xs text-gray-400">Lightning Sats</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Bitcoin className="w-5 h-5 text-amber-500" />
            <div>
              <span className="text-lg font-semibold text-orange-300">{balance.onchain.toFixed(5)}</span>
              <p className="text-xs text-gray-400">On-Chain BTC</p>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h2 className="text-lg font-semibold text-white mb-4">Bot Controls</h2>
        <div className="space-y-4">
          {Object.entries(bots).map(([botName, bot]) => (
            <div key={botName} className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div 
                  className="w-3 h-3 rounded-full" 
                  style={{
                    background: bot.running 
                      ? 'linear-gradient(135deg, #14b8a6 0%, #22c55e 100%)' 
                      : '#6b7280'
                  }}
                ></div>
                <span className="text-white capitalize font-medium">{botName} Bot</span>
                <span 
                  className={`text-sm px-2 py-1 rounded ${
                    bot.running ? 'text-teal-300' : 'bg-gray-700 text-gray-400'
                  }`}
                  style={bot.running ? {backgroundColor: 'rgba(20, 184, 166, 0.2)'} : {}}
                >
                  {bot.status}
                </span>
              </div>
              <button
                onClick={() => toggleBot(botName)}
                className="p-2 rounded-lg transition-all duration-300 text-white"
                style={{
                  background: bot.running 
                    ? 'linear-gradient(135deg, #dc2626 0%, #ef4444 100%)' 
                    : 'linear-gradient(135deg, #14b8a6 0%, #22c55e 100%)',
                  boxShadow: bot.running 
                    ? '0 2px 10px rgba(220, 38, 38, 0.3)' 
                    : '0 2px 10px rgba(20, 184, 166, 0.3)'
                }}
              >
                {bot.running ? <PowerOff className="w-4 h-4" /> : <Power className="w-4 h-4" />}
              </button>
            </div>
          ))}
        </div>
      </div>

      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h2 className="text-lg font-semibold text-white mb-4">Open Trades</h2>
        <div className="space-y-3">
          {trades.map(trade => (
            <div key={trade.id} className="flex items-center justify-between bg-gray-700 p-3 rounded">
              <div className="flex items-center space-x-3">
                <span className="font-semibold text-white">{trade.token}</span>
                <span className="text-gray-400">${trade.entry < 1 ? trade.entry.toFixed(6) : trade.entry.toLocaleString()}</span>
                <div className="flex flex-col">
                  <span className="text-gray-300 text-sm">{trade.amount}</span>
                  <span className="text-xs text-gray-500">${trade.tradeValue.toFixed(2)}</span>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {trade.isProfit ? (
                  <TrendingUp className="w-4 h-4 text-green-400" />
                ) : (
                  <TrendingDown className="w-4 h-4 text-red-400" />
                )}
                <span className={`font-semibold ${trade.isProfit ? 'text-green-400' : 'text-red-400'}`}>
                  {trade.isProfit ? '+' : ''}{trade.pnl}%
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderLightning = () => (
    <div className="p-6 space-y-6">
      <div className="flex bg-gray-800 rounded-lg p-1 border border-gray-700">
        {[
          { id: 'balance', label: 'Balance', icon: Zap },
          { id: 'swap', label: 'Swap', icon: ArrowUpDown },
          { id: 'pay', label: 'Pay', icon: QrCode }
        ].map(tab => (
          <button
            key={tab.id}
            onClick={() => setLightningTab(tab.id)}
            className={`flex-1 flex items-center justify-center space-x-2 py-2 px-3 rounded-md transition-colors ${
              lightningTab === tab.id ? 'bg-teal-600 text-white' : 'text-gray-400 hover:text-gray-300'
            }`}
          >
            <tab.icon className="w-4 h-4" />
            <span className="text-sm font-medium">{tab.label}</span>
          </button>
        ))}
      </div>

      {lightningTab === 'balance' && (
        <div className="space-y-4">
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-white">Lightning Wallet</h2>
              <Zap className="w-6 h-6 text-yellow-400" />
            </div>
            <div className="text-center py-6">
              <div className="text-4xl font-bold text-yellow-400 mb-2">
                {balance.lightning.toLocaleString()}
              </div>
              <div className="text-gray-400">sats</div>
              <div className="text-sm text-gray-500 mt-1">
                ≈ ${(balance.lightning * 0.00063).toFixed(2)} USD
              </div>
            </div>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-white">On-Chain Wallet</h2>
              <Bitcoin className="w-6 h-6 text-amber-500" />
            </div>
            <div className="text-center py-6">
              <div className="text-4xl font-bold text-orange-400 mb-2">
                {balance.onchain.toFixed(8)}
              </div>
              <div className="text-gray-400">BTC</div>
              <div className="text-sm text-gray-500 mt-1">
                ≈ ${(balance.onchain * 65000).toFixed(2)} USD
              </div>
            </div>
          </div>
        </div>
      )}

      {lightningTab === 'swap' && (
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h2 className="text-lg font-semibold text-white mb-4">Swap Assets</h2>
          <div className="grid grid-cols-3 gap-2 mb-6">
            <button className="p-3 rounded-lg text-sm font-medium bg-teal-600 text-white">
              ⚡ → ₿
            </button>
            <button className="p-3 rounded-lg text-sm font-medium bg-gray-700 text-gray-300">
              ₿ → ⚡
            </button>
            <button className="p-3 rounded-lg text-sm font-medium bg-gray-700 text-gray-300">
              ⚡ → Alt
            </button>
          </div>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">From: Lightning Sats</label>
              <div className="relative">
                <input
                  type="number"
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400"
                  placeholder="Enter sats amount"
                />
                <div className="absolute right-3 top-3 text-gray-400 text-sm">sats</div>
              </div>
            </div>
            <button
              className="w-full text-white font-semibold py-3 px-4 rounded-lg transition-all duration-300"
              style={{
                background: 'linear-gradient(135deg, #14b8a6 0%, #22c55e 100%)',
                boxShadow: '0 4px 20px rgba(20, 184, 166, 0.3)'
              }}
            >
              Execute Swap
            </button>
          </div>
        </div>
      )}

      {lightningTab === 'pay' && (
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h2 className="text-lg font-semibold text-white mb-4">Lightning Payments</h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">Lightning Invoice</label>
              <textarea
                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 h-24 resize-none"
                placeholder="Paste Lightning invoice (lnbc...)"
              />
            </div>
            <button
              className="w-full text-white font-semibold py-3 px-4 rounded-lg transition-all duration-300"
              style={{
                background: 'linear-gradient(135deg, #14b8a6 0%, #22c55e 100%)',
                boxShadow: '0 4px 20px rgba(20, 184, 166, 0.3)'
              }}
            >
              Pay Invoice
            </button>
          </div>
        </div>
      )}
    </div>
  );

  const renderLogs = () => (
    <div className="p-6">
      <div className="bg-gray-800 rounded-lg border border-gray-700">
        <div className="p-6 border-b border-gray-700">
          <h2 className="text-lg font-semibold text-white">Trade Logs</h2>
        </div>
        <div className="max-h-96 overflow-y-auto">
          {logs.map(log => (
            <div key={log.id} className="p-4 border-b border-gray-700 last:border-b-0">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <span className="text-gray-400 text-sm font-mono">{log.timestamp}</span>
                  <span className="font-semibold text-white">{log.token}</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${
                    log.action === 'BUY' ? 'bg-green-900 text-green-300' : 'bg-red-900 text-red-300'
                  }`}>
                    {log.action}
                  </span>
                  <div className="flex flex-col">
                    <span className="text-gray-300 text-sm">{log.amount}</span>
                    <span className="text-xs text-gray-500">${log.tradeValue.toFixed(2)}</span>
                  </div>
                </div>
                <span className={`font-semibold ${log.isProfit ? 'text-green-400' : 'text-red-400'}`}>
                  {log.isProfit ? '+' : ''}{log.pnl}%
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderSettings = () => (
    <div className="p-6 space-y-6">
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <div className="flex items-center space-x-2 mb-4">
          <Crown className="w-5 h-5 text-yellow-400" />
          <h2 className="text-lg font-semibold text-white">Subscription</h2>
        </div>
        
        <div className="bg-gray-700 rounded-lg p-4 mb-4">
          <div className="flex items-center justify-between mb-2">
            <span className="font-medium text-white">{subscriptionStatus.plan}</span>
            <span className="text-green-400 font-semibold">$29.99/month</span>
          </div>
          <p className="text-sm text-gray-400">Full access to all trading bots and features</p>
        </div>

        <div className="space-y-3">
          <h3 className="text-sm font-medium text-gray-300">Available Plans</h3>
          
          <div className="flex items-center justify-between p-3 bg-gray-700 rounded border border-gray-600">
            <div>
              <span className="text-white font-medium">Monthly Plan</span>
              <p className="text-xs text-gray-400">Billed monthly</p>
            </div>
            <div className="text-right">
              <span className="text-white font-semibold">$29.99</span>
              <p className="text-xs text-gray-400">per month</p>
            </div>
          </div>

          <div className="flex items-center justify-between p-3 bg-gray-700 rounded border-2 border-teal-500">
            <div>
              <span className="text-white font-medium">Quarterly Plan</span>
              <div className="flex items-center space-x-2">
                <p className="text-xs text-gray-400">Billed every 3 months</p>
                <span className="text-xs bg-teal-600 text-teal-100 px-2 py-1 rounded">15% OFF</span>
              </div>
            </div>
            <div className="text-right">
              <span className="text-white font-semibold">$76.47</span>
              <p className="text-xs text-gray-400">$25.49/month</p>
            </div>
          </div>

          <div className="flex items-center justify-between p-3 bg-gray-700 rounded border border-gray-600">
            <div>
              <span className="text-white font-medium">Yearly Plan</span>
              <div className="flex items-center space-x-2">
                <p className="text-xs text-gray-400">Billed annually</p>
                <span className="text-xs bg-green-600 text-green-100 px-2 py-1 rounded">30% OFF</span>
              </div>
            </div>
            <div className="text-right">
              <span className="text-white font-semibold">$251.91</span>
              <p className="text-xs text-gray-400">$20.99/month</p>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h2 className="text-lg font-semibold text-white mb-4">Bot Configuration</h2>
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Scalper Aggressiveness: {settings.scalperAggressiveness}%
            </label>
            <input
              type="range"
              min="0"
              max="100"
              value={settings.scalperAggressiveness}
              onChange={(e) => setSettings(prev => ({...prev, scalperAggressiveness: parseInt(e.target.value)}))}
              className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
            />
          </div>
          
          <div className="border-t border-gray-600 pt-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h3 className="text-sm font-medium text-white">Micro Trading</h3>
                <p className="text-xs text-gray-400">Enable small trade amounts starting from $1</p>
              </div>
              <button
                onClick={() => setSettings(prev => ({...prev, enableMicroTrading: !prev.enableMicroTrading}))}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  settings.enableMicroTrading 
                    ? 'bg-gradient-to-r from-teal-500 to-green-500' 
                    : 'bg-gray-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${
                    settings.enableMicroTrading ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            </div>
            
            {settings.enableMicroTrading && (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Minimum Trade Amount: ${settings.minimumTradeAmount}
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="100"
                    step="1"
                    value={settings.minimumTradeAmount}
                    onChange={(e) => setSettings(prev => ({...prev, minimumTradeAmount: parseInt(e.target.value)}))}
                    className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                  />
                  <div className="flex justify-between text-xs text-gray-400 mt-1">
                    <span>$1</span>
                    <span>$100</span>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-3">Quick Presets</label>
                  <div className="grid grid-cols-4 gap-2">
                    {[1, 5, 10, 25].map(amount => (
                      <button
                        key={amount}
                        onClick={() => setSettings(prev => ({...prev, minimumTradeAmount: amount}))}
                        className={`py-2 px-3 rounded text-xs font-medium transition-all ${
                          settings.minimumTradeAmount === amount
                            ? 'text-white'
                            : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                        }`}
                        style={settings.minimumTradeAmount === amount ? {
                          background: 'linear-gradient(135deg, #14b8a6 0%, #22c55e 100%)'
                        } : {}}
                      >
                        ${amount}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        <button 
          className="w-full mt-6 text-white font-semibold py-3 px-4 rounded-lg transition-all duration-300"
          style={{
            background: 'linear-gradient(135deg, #14b8a6 0%, #22c55e 100%)',
            boxShadow: '0 4px 20px rgba(20, 184, 166, 0.3)'
          }}
        >
          Save to Cloud
        </button>
      </div>
    </div>
  );

  return (
    <div className="max-w-md mx-auto bg-gray-900 min-h-screen">
      <div className="bg-gray-800 px-6 py-4 border-b border-gray-700 flex items-center justify-between">
        <div>
          <h1 className="text-xl font-bold text-white">Stax</h1>
          <p className="text-sm text-gray-400">Trading Bot Manager</p>
        </div>
        <button
          onClick={handleLogout}
          className="text-gray-400 hover:text-white p-2"
          title="Logout"
        >
          <Power className="w-5 h-5" />
        </button>
      </div>

      <div className="pb-20">
        {activeTab === 'dashboard' && renderDashboard()}
        {activeTab === 'lightning' && renderLightning()}
        {activeTab === 'logs' && renderLogs()}
        {activeTab === 'settings' && renderSettings()}
      </div>

      <div className="fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-md bg-gray-800 border-t border-gray-700">
        <div className="flex justify-around py-2">
          {[
            { id: 'dashboard', icon: Activity, label: 'Dashboard' },
            { id: 'lightning', icon: Zap, label: 'Lightning' },
            { id: 'logs', icon: FileText, label: 'Logs' },
            { id: 'settings', icon: Settings, label: 'Settings' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex flex-col items-center p-2 rounded-lg transition-colors ${
                activeTab === tab.id ? 'text-teal-400' : 'text-gray-500 hover:text-gray-300'
              }`}
            >
              <tab.icon className="w-5 h-5" />
              <span className="text-xs mt-1">{tab.label}</span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default StaxApp;
